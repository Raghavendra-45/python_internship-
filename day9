#DFS tree:
class Node:
    def __init__(self,root):
        self.data=root
        self.left=None
        self.right=None
        self.level=None
def inorder(root):
    if(root==None):
        return
    inorder(root.left)
    print(root.data,end=' ')
    inorder(root.right)
def preorder(root):
    if(root==None):
        return
    print(root.data,end=' ')
    preorder(root.left)
    preorder(root.right)
def postorder(root):
    if(root==None):
        return
    postorder(root.left)
    postorder(root.right)
    print(root.data,end=' ')
root=Node(10)
root.left=Node(5)
root.right=Node(20)
root.left.left=Node(2)
root.left.right=Node(8)
root.right.left=Node(15)
root.right.right=Node(25)
root.left.left.left=Node(1)
print(inorder(root))
print(preorder(root))
print(postorder(root))



# BFS tree (level order):
class Node:
    def __init__(self, value):
        self.val = value
        self.left = None
        self.right = None
def level_order(root):
    if not root:
        return
    queue = [root]
    while queue:
        current = queue.pop(0)
        print(current.val, end=' ')
        if current.left:
            queue.append(current.left)
        if current.right:
            queue.append(current.right)
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)
level_order(root)
    


# sum of nodes:
class Node:
    def __init__(self,root):
        self.data=root
        self.left=None
        self.right=None
        self.level=None
def sum(root):
    if root==None:
        return 0
    else:
        return root.data+sum(root.left)+sum(root.right)
root=Node(10)
root.left=Node(5)
root.right=Node(20)
root.left.left=Node(2)
root.left.right=Node(8)
root.right.left=Node(15)
root.right.right=Node(25)
root.left.left.left=Node(1)
print(sum(root))



# sum of even nodes:
class Node:
    def __init__(self,root):
        self.data=root
        self.left=None
        self.right=None
        self.level=None
def sum(root):
    if root==None:
        return 0
    current=root.data if root.data%2==0 else 0
    return current+sum(root.left)+sum(root.right)
root=Node(10)
root.left=Node(5)
root.right=Node(20)
root.left.left=Node(2)
root.left.right=Node(8)
root.right.left=Node(15)
root.right.right=Node(25)
root.left.left.left=Node(1)
print(sum(root))



# height of the tree:
class Node:
    def __init__(self,root):
        self.data=root
        self.left=None
        self.right=None
        self.level=None
def height(root):
    if root==None:
        return -1
    return max(height(root.left),height(root.right))+1
root=Node(10)
root.left=Node(5)
root.right=Node(20)
root.left.left=Node(2)
root.left.right=Node(8)
root.right.left=Node(15)
root.right.right=Node(25)
root.left.left.left=Node(1)
print(height(root))



# top view of the tree:
class Node:
    def __init__(self,root):
        self.data=root
        self.left=None
        self.right=None
        self.level=None
def top_view(root):
    print()
    q= []
    d=dict()
    root.level=0
    q.append(root)
    while len(q)!=0:
        root=q.pop(0)
        if root.level not in d:
            d[root.level]=root.data
        if root.left is not None:
            q.append(root.left)
            root.left.level=root.level-1
        if root.right is not None:
            q.append(root.right)
            root.right.level=root.level+1
    for i in sorted(d):
        print(d[i],end=" ")
root=Node(10)
root.left=Node(5)
root.right=Node(20)
root.left.left=Node(2)
root.left.right=Node(8)
root.right.left=Node(15)
root.right.right=Node(25)
root.left.left.left=Node(1)
print(top_view(root))



# binary search tree:
class Node:
    def __init__(self,root):
        self.data=root
        self.left=None
        self.right=None
        self.level=None
l=[]
l1=[]
def inorder(root):   
    if root is None:
        return
    inorder(root.left)
    print(root.data, end=" ")
    l.append(root.data)
    inorder(root.right)
    l1=l
if l1==l.sort():
    print("binary")
else:
    print("no")
root=Node(10)
root.left=Node(5)
root.right=Node(20)
root.left.left=Node(2)
root.left.right=Node(8)
root.right.left=Node(15)
root.right.right=Node(25)
root.left.left.left=Node(1)
print(inorder(root))
